
syntax = "proto3";

import "google/protobuf/empty.proto";

package pruntime_rpc;

// The Phactory Runtime service definition.
service PhactoryAPI {
  // Get basic information about Phactory state.
  rpc GetInfo (google.protobuf.Empty) returns (PhactoryInfo) {}

  // Sync the parent chain header
  rpc SyncHeader (HeadersToSync) returns (SyncedTo) {}

  // Sync the parachain header
  rpc SyncParaHeader (ParaHeadersToSync) returns (SyncedTo) {}

  // Sync a combined batch of relaychain & parachain headers
  // NOTE:
  //   - The two latest headers MUST be aligned with each other by the `Para.Heads` read from the relaychain storage.
  //   - The operation is not guarenteed to be atomical. If the parachain header is rejected, the already synced relaychain
  //     headers will keep it's progress.
  rpc SyncCombinedHeaders (CombinedHeadersToSync) returns (HeadersSyncedTo) {}

  // Dispatch blocks (Sync storage changes)
  rpc DispatchBlocks (Blocks) returns (SyncedTo) {}

  // Init the Phactory runtime
  rpc InitRuntime (InitRuntimeRequest) returns (InitRuntimeResponse) {}

  // Get the cached Phactory runtime init response
  rpc GetRuntimeInfo (google.protobuf.Empty) returns (InitRuntimeResponse) {}

  // Get pending egress messages
  rpc GetEgressMessages (google.protobuf.Empty) returns (GetEgressMessagesResponse) {}

  // Send a query to a contract
  rpc ContractQuery (ContractQueryRequest) returns (ContractQueryResponse) {}

  // Get given worker's state from a GK.
  rpc GetWorkerState (GetWorkerStateRequest) returns (WorkerState) {}

  // Send geolocation data to pruntime to initialize a secret message channel toward geolocation contract.
  rpc SendCoordinateInfo (SendCoordinateInfoRequest) returns (google.protobuf.Empty) {}

  // A echo rpc to measure network RTT.
  rpc Echo (EchoMessage) returns (EchoMessage) {}
}

// Basic information about a Phactory instance.
message PhactoryInfo {
  // Whether the init_runtime has been called successfully.
  bool initialized = 1;
  // Whether the worker has been registered on-chain.
  bool registered = 2;
  // Genesis block header hash passed in by init_runtime.
  optional string genesis_block_hash = 4;
  // Public key of the worker.
  optional string public_key = 5;
  // ECDH public key of the worker.
  optional string ecdh_public_key = 6;
  // The relaychain/solochain header number synchronized to.
  uint32 headernum = 7;
  // The parachain header number synchronized to. (parachain mode only)
  uint32 para_headernum = 8;
  // The changes block number synchronized to.
  uint32 blocknum = 9;
  // Current chain storage's state root.
  string state_root = 10;
  // Whether the worker is running in dev mode.
  bool dev_mode = 11;
  // The number of mq messages in the egress queue.
  uint64 pending_messages = 12;
  // Local estimated benchmark score.
  uint64 score = 13;
  // Status of gatekeeper
  GatekeeperStatus gatekeeper = 14;
  // The App version
  string version = 15;
  // The git commit hash which this binary was built from
  string git_revision = 16;
  // The number of running side tasks
  uint64 running_side_tasks = 17;
  // The heap memory usage of the enclave.
  MemoryUsage memory_usage = 18;
}

enum GatekeeperRole {
  None = 0;
  Dummy = 1;
  Active = 2;
}

message GatekeeperStatus {
  // The Gatekeeper role of the worker.
  GatekeeperRole role = 1;
  // The master public key, empty if not a Gatekeeper
  string master_public_key = 2;
}

message MemoryUsage {
  // The current heap usage of Rust codes.
  uint64 rust_used = 1;
  // The peak heap usage of Rust codes.
  uint64 rust_peak_used = 2;
  // The entire peak heap memory usage of the enclave.
  uint64 total_peak_used = 3;
}

// Response to SyncHeader & SyncParaHeader.
message SyncedTo {
  // The final actual block number synced to.
  uint32 synced_to = 1;
}

// Request parameters for SyncHeader.
message HeadersToSync {
  // The relaychain headers to be synced.
  // @codec scale crate::blocks::HeadersToSync
  bytes encoded_headers = 1;
  // @codec scale crate::blocks::AuthoritySetChange
  optional bytes encoded_authority_set_change = 2;
}

// Request parameters for SyncParaHeader.
message ParaHeadersToSync {
  // The parachain headers to be synced.
  // @codec scale crate::blocks::Headers
  bytes encoded_headers = 1;
  // aka StorageProof
  repeated bytes proof = 2;
}

// Request parameters for SyncCombinedHeaders.
message CombinedHeadersToSync {
  // The relaychain headers to be synced.
  // @codec scale crate::blocks::HeadersToSync
  bytes encoded_relaychain_headers = 1;
  // @codec scale crate::blocks::AuthoritySetChange
  optional bytes authority_set_change = 2;
  // The parachain headers to be synced.
  // @codec scale crate::blocks::Headers
  bytes encoded_parachain_headers = 3;
  // aka StorageProof
  repeated bytes proof = 4;
}

// Response to SyncCombinedHeaders.
message HeadersSyncedTo {
  uint32 relaychain_synced_to = 1;
  uint32 parachain_synced_to = 2;
}

// Request parameters for DispatchBlocks.
message Blocks {
  // The blocks to be synced.
  // @codec scale Vec<crate::blocks::BlockHeaderWithChanges>
  bytes encoded_blocks = 1;
}

// Request parameters for InitRuntime.
message InitRuntimeRequest {
  // Skip the remote attestation report.
  bool skip_ra = 1;
  // Genesis block infomation for light validation.
  // @codec scale crate::blocks::GenesisBlockInfo
  bytes encoded_genesis_info = 2;
  // Worker identity key for dev mode.
  optional bytes debug_set_key = 3;
  // The parachain's genesis storage state.
  // @codec scale crate::blocks::StorageState
  bytes encoded_genesis_state = 4;
  // The operator of of this worker, which has the permission to bind it's miner.
  // @codec scale chain::AccountId
  optional bytes encoded_operator = 5;
  // Init the runtime for parachain.
  bool is_parachain = 6;
}

message InitRuntimeResponse {
  // @codec scale phala_types::WorkerRegistrationInfo<chain::AccountId>
  bytes encoded_runtime_info = 1;
  // The hash of the first synced relaychain header.
  // @codec scale chain::Hash
  bytes encoded_genesis_block_hash = 2;
  // The worker's public key.
  // @codec scale phala_types::WorkerPublicKey
  bytes encoded_public_key = 3;
  // @codec scale phala_types::EcdhPublicKey
  bytes encoded_ecdh_public_key = 4;
  // The sgx attestation
  optional Attestation attestation = 5;
}

message Attestation {
  int32 version = 1;
  string provider = 2;
  AttestationReport payload = 3;
  uint64 timestamp = 4;
}

message AttestationReport {
  string report = 1;
  bytes signature = 2;
  bytes signing_cert = 3;
}

// Response for GetEgressMessages
message GetEgressMessagesResponse {
  // @codec scale EgressMessages
  bytes encoded_messages = 1;
}

// Request parameters for ContractQuery
message ContractQueryRequest {
  // The query data.
  // @codec scale crate::crypto::EncryptedData
  bytes encoded_encrypted_data = 1;

  // The signature infomation
  Signature signature = 2;
}

message Signature {
  // The certificate of the signer
  Certificate signed_by = 1;
  // The signature type
  SignatureType signature_type = 2;
  // The signature of the data
  bytes signature = 3;
}

message Certificate {
  // The body of the certificate
  // @codec scale crate::crypto::CertificateBody
  bytes encoded_body = 1;
  // An optinal signature of the body signed by a parent certificate.
  // @boxed
  Signature signature = 2;
}

// Supported signature types.
//
// Each signature type also has its corresponding "WrapBytes" version as defined in Polkadot.js:
//   https://github.com/polkadot-js/extension/blob/e4ce268b1cad5e39e75a2195e3aa6d0344de7745/packages/extension-dapp/src/wrapBytes.ts
// In wrapped version, the message will have tags wrapped around the actual message
// (`<Bytes>{msg}</Bytes>`). This was introduced in Polkadot.js to reduce the risk it's abused to
// sign regular transaction. However, we have to support it as well because it's the only message
// format the Polkadot.js Extension can sign.
enum SignatureType {
  Ed25519 = 0;
  Sr25519 = 1;
  Ecdsa = 2;
  Ed25519WrapBytes = 3;
  Sr25519WrapBytes = 4;
  EcdsaWrapBytes = 5;
}

message ContractQueryResponse {
  // The query result.
  // @codec scale crate::crypto::EncryptedData
  bytes encoded_encrypted_data = 1;
}

// Request parameters for GetWorkerState
message GetWorkerStateRequest {
  // The worker's public key.
  bytes public_key = 1;
}

// Response for GetWorkerState
message WorkerState {
  bool registered = 1;
  bool unresponsive = 2;
  BenchState bench_state = 3;
  MiningState mining_state = 4;
  repeated uint32 waiting_heartbeats = 5;
  uint32 last_heartbeat_for_block = 6;
  uint32 last_heartbeat_at_block = 7;
  ResponsiveEvent last_gk_responsive_event = 8;
  uint32 last_gk_responsive_event_at_block = 9;
  TokenomicInfo tokenomic_info = 10;
}

message BenchState {
  uint32 start_block = 1;
  uint64 start_time = 2;
  uint32 duration = 4;
}

message MiningState {
  uint32 session_id = 1;
  bool paused = 2;
  uint64 start_time = 3;
}

message SendCoordinateInfoRequest {
  sint32 latitude = 1;
  sint32 longitude = 2;
  string city_name = 3;
}

message EchoMessage {
  bytes echo_msg = 1;
}

enum ResponsiveEvent {
  NoEvent = 0;
  EnterUnresponsive = 1;
  ExitUnresponsive = 2;
}

message TokenomicInfo {
  reserved 3;

  string v = 1;
  string v_init = 2;
  string payable = 19;
  uint64 v_update_at = 4;
  uint32 v_update_block = 5;
  uint64 iteration_last = 6;
  uint64 challenge_time_last = 7;
  string p_bench = 8;
  string p_instant = 9;
  uint32 confidence_level = 10;

  string last_payout = 11;
  uint32 last_payout_at_block = 12;
  string total_payout = 13;
  uint32 total_payout_count = 14;
  string last_slash = 15;
  uint32 last_slash_at_block = 16;
  string total_slash = 17;
  uint32 total_slash_count = 18;

  // next: 20
}
